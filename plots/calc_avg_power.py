# -*- coding: utf-8 -*-
"""Untitled40.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fb1c9KCnQQ2HsL97_iujXlwjvMGbcB6z
"""

import scipy.optimize as opt
import numpy as np

thetabw, phibw = 65, 65
slav = 30
Am = 30
gain_max = 8
ISD = 200
lambda_ = 4/(np.pi*ISD**2)
d1 = 87.73
p1 = 0.675

def LOS_prob(dist_2d):
  if dist_2d<180:
    return 1
  else:
    return d1/(dist_2d) + np.exp(-dist_2d/p1)*(1-d1/dist_2d)

def response(phi, theta):
    """
    Computes antenna gain for angles

    Parameters
    ----------
    phi:  array
        Azimuth angles in degrees
    theta: array
        Elevation angles in degrees

    Returns
    -------
    gain:  array
        Antenna gain in dBi
    """
    # Rotate the angles relative to element boresight.
    # Note the conversion from inclination to elevation angles
    phi1 = phi
    theta1 = theta

    # Put the

    # Put the phi from -180 to 180
    phi1 = phi1 % 360
    phi1 = phi1 - 360 * (phi1 > 180)

    #print (min(phi), max(phi))
    # plot_pattern(self.response,100,0,0,100,'rect_phi')

    if thetabw > 0:
        Av = -np.minimum(12 * ((theta1) / thetabw) ** 2, slav)
    else:
        Av = 0
    if phibw > 0:
        Ah = -np.minimum(12 * (phi1 / phibw) ** 2, Am)
    else:
        Ah = 0
    gain = gain_max - np.minimum(-Av - Ah, Am)

    return gain


freq = 28e9
bf_gain = 0 #10*np.log10(64*16) - 30

elem_gain = -1
tx_power = 23

KT = -174
N_f = 7
BW = 400e6
noise_power = KT + N_f + 10*np.log10(BW)


rx_power_list = []
h = 120
bf_gain = 0
tx_power = 23
freq = 28e9

for k in range(1000):
  u = np.random.uniform(0,1,1)
  dist_2d = np.sqrt(-np.log(1-u)/(lambda_*np.pi))
  los_prob = LOS_prob(dist_2d)
  p = np.random.uniform(0,1,1)
  if p <= los_prob:
    beta = 2
  else:
    beta = 3
  distance = np.sqrt(dist_2d**2 + h**2)

  theta = np.rad2deg(np.arctan(dist_2d/h))
  phi = np.random.uniform(-60, 60, 1)

  elem_gain = response(phi, 90-theta+12)

  fspl = 10*beta*np.log10(distance) + 20*np.log10(freq) -147.55
  rx_power = tx_power + bf_gain + elem_gain - fspl
  rx_power_list.append(rx_power)

rx_power_avg = np.mean(rx_power_list)

print(f'average INR is {rx_power_avg-noise_power} [dB]')